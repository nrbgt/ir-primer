doctype html
html(lang="en")
  head
    meta(charset="utf-8")

    style: :stylus
      @import "./temperatures.css"
      @import "./standalone.css"

      .equation
        visibility hidden
      #MathJax_Message, .MathJax_Preview
        display none

    include ./lib/mathjax.jade


  body
    .titles
      .title
        h1 Celsius
        .equation.
          \definecolor{other}{RGB}{100,100,100}
          \definecolor{kelvin}{RGB}{0,0,0}
          \definecolor{celsius}{RGB}{0,128,0}
          \definecolor{fahrenheit}{RGB}{128,0,0}
          \definecolor{rankine}{RGB}{0,0,255}

          \color{celsius}<%= C %>
          \color{other} =
          \color{kelvin}<%= K %>
          \color{other} -273.15
      .title
        h1 Fahrenheit
        .equation.
          \definecolor{other}{RGB}{100,100,100}
          \definecolor{kelvin}{RGB}{0,0,0}
          \definecolor{celsius}{RGB}{0,128,0}
          \definecolor{fahrenheit}{RGB}{255,0,0}
          \definecolor{rankine}{RGB}{0,0,255}

          \color{fahrenheit}<%= F %>
          \color{other} = (
          \color{kelvin}<%= K %>\color{other}
          \color{other}\times\frac{9}{5}) - 459.67
      .title
        h1 Rankine
        .equation.
          \definecolor{other}{RGB}{100,100,100}
          \definecolor{kelvin}{RGB}{0,0,0}
          \definecolor{celsius}{RGB}{0,128,0}
          \definecolor{fahrenheit}{RGB}{255,0,0}
          \definecolor{rankine}{RGB}{0,0,255}
          
          \color{rankine}<%= R %>
          \color{other}=
          \color{kelvin}<%= K %>
          \color{other}\times\frac{9}{5}
    .explanation

    script(src="./bower_components/requirejs/require.js")
    script
      :coffee
        require ["./bower_components/d3/d3.js", "./temperatures.js", "fn.js"],
          (d3, Temperatures, Fn) ->
            temperatures = Temperatures d3

            fn = Fn d3, MathJax
              .replacements
                K: "K"
                C: "C"
                R: "R"
                F: "F"

            plot = d3.select ".explanation"
              .call temperatures

            eq = d3.selectAll ".equation"
              .call fn

            temperatures.dispatch.on "update", (replacements)->
              for k, v of replacements
                replacements[k] = v.toFixed 2

              eq.call fn.replacements replacements

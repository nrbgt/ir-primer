// Generated by CoffeeScript 1.9.0
(function() {
  define(["./explanation.js"], function(Exp) {
    var Density, d3, domains, elevations, i, labels, padding, references, solutionParts;
    d3 = null;
    padding = {
      top: 40,
      left: 120,
      right: 120,
      bottom: 110
    };
    domains = {
      x: [0, 2.5e4],
      y: [[0, 300], [0, 1]]
    };
    elevations = (function() {
      var _i, _results;
      _results = [];
      for (i = _i = 0; _i <= 2.5e4; i = _i += 500) {
        _results.push(i);
      }
      return _results;
    })();
    solutionParts = ["K", "rP", "rD"];
    references = solutionParts.map(function(key, i) {
      return {
        series: key,
        scaleIdx: i === 2 ? 1 : i,
        points: []
      };
    });
    labels = ["Altitude", "Temperature", "Relative Pressure", "Relative Density"];
    elevations.map(function(elevation) {
      var data;
      data = Exp.laws.Density(elevation);
      return references.map(function(series) {
        return series.points.push([elevation, data[series.series]]);
      });
    });
    Density = function(_d3) {
      var api, axes, colorizeLegend, plotSeries, scales, seriesPath;
      d3 = _d3;
      scales = {
        x: d3.scale.linear().domain(domains.x),
        y: [d3.scale.linear().domain(domains.y[0]), d3.scale.linear().domain(domains.y[1])],
        color: d3.scale.ordinal().range(["blue", "red", "green"])
      };
      axes = {
        x: d3.svg.axis().scale(scales.x).orient('bottom'),
        y: [d3.svg.axis().scale(scales.y[0]).orient('left'), d3.svg.axis().scale(scales.y[1]).orient('right')]
      };
      seriesPath = function(y) {
        return d3.svg.line().x(function(d) {
          return scales.x(d[0]);
        }).y(function(d) {
          return y(d[1]);
        });
      };
      plotSeries = function(series) {
        return series.call(function(series) {
          return series.enter().append("g").classed({
            series: true
          }).append("path").style({
            stroke: function(d, i) {
              return scales.color(i);
            }
          });
        }).selectAll("path").attr({
          d: function(d, i) {
            var fn;
            fn = seriesPath(scales.y[d.scaleIdx]);
            return fn(d.points);
          }
        });
      };
      colorizeLegend = function(d, i) {
        if (i) {
          return scales.color(i - 1);
        } else {
          return "black";
        }
      };
      api = function(selection) {
        var ELEVATION, clip, defs, el_xAxis, el_y0Axis, el_y1Axis, plots, plotsBg, solutions, svg, xLabel, y0Label, y1Label;
        selection.classed({
          density: true,
          explanation: true
        });
        ELEVATION = 60;
        api.explore = function() {
          var mouseX, mouseY, _ref;
          _ref = d3.mouse(this), mouseX = _ref[0], mouseY = _ref[1];
          ELEVATION = Math.min(domains.x[1], Math.max(scales.x.invert(mouseX), domains.x[0]));
          return api.update();
        };
        api.update = function() {
          var scaleSolution, scaleSolutions;
          scaleSolution = Exp.laws.Density(ELEVATION);
          scaleSolutions = solutionParts.map(function(part) {
            return [ELEVATION, scaleSolution[part]];
          });
          svg.selectAll(".solution.interactive").data([[ELEVATION, scaleSolutions[0][1]], [ELEVATION, scaleSolutions[1][1]], [ELEVATION, scaleSolutions[2][1]]]).call(function(solutionLabel) {
            return solutionLabel.enter().append("g").classed({
              solution: true,
              interactive: true
            }).append("line").style({
              stroke: function(d, i) {
                return scales.color(i);
              }
            }).attr({
              x1: 0,
              y1: 0,
              x2: function(d, i) {
                if (i === 0) {
                  return 20;
                } else {
                  return -20;
                }
              },
              y2: 0,
              "marker-start": function(d, i) {
                return "url(#end-arrow-" + (scales.color(i)) + ")";
              }
            });
          }).attr({
            transform: function(d, i) {
              if (i === 0) {
                return "translate(" + (padding.left + 5) + ", " + (scales.y[0](d[1])) + ")";
              } else {
                return "translate(" + (scales.x.range()[1] - 5) + ", " + (scales.y[1](d[1])) + ")";
              }
            }
          }).select("text").text(function(d, i) {
            return ['m', 'K', 'rP', 'rD'][i] + " = " + (d[1].toFixed(2));
          });
          plots.select(".scanline path").datum([[scales.x(ELEVATION), scales.y[0].range()[0]], [scales.x(ELEVATION), scales.y[0].range()[1]]]).attr({
            d: d3.svg.line()
          });
          solutions.attr({
            transform: "translate(" + (scales.x.range()[1] - padding.left * 1.5) + ", " + (2 * padding.top) + ")"
          }).selectAll(".solution.legend").data([[ELEVATION, ELEVATION]].concat(scaleSolutions)).call(function(solution) {
            solution.enter().append("g").classed({
              solution: true,
              legend: true
            }).call(function(solution) {
              solution.append("text").classed({
                scale: true
              }).attr({
                dx: 10
              });
              return solution.append("text").classed({
                value: true
              }).attr("text-anchor", "end");
            });
            solution.attr({
              transform: function(d, i) {
                return "translate(0 " + (i * 30) + ")";
              }
            });
            solution.select(".scale").text(function(d, i) {
              return labels[i];
            }).style({
              fill: colorizeLegend
            });
            return solution.select(".value").text(function(d, i) {
              return d[1].toFixed(2);
            }).style({
              fill: colorizeLegend
            });
          });
          return api;
        };
        api.resize = function(event) {
          var HEIGHT, WIDTH;
          WIDTH = selection.node().clientWidth;
          HEIGHT = selection.node().clientHeight;
          scales.x.range([padding.left, WIDTH - padding.right]);
          scales.y.map(function(scale) {
            return scale.range([HEIGHT - padding.bottom, padding.top]);
          });
          svg.attr({
            width: WIDTH,
            height: HEIGHT
          });
          plotsBg.attr({
            y: padding.top,
            width: WIDTH - padding.right,
            height: HEIGHT - padding.top
          });
          plots.selectAll('.series').data(references).call(plotSeries);
          clip.attr({
            width: WIDTH,
            height: scales.y[0].range()[0],
            y: padding.top,
            x: 0
          });
          el_xAxis.attr({
            transform: "translate(0, " + (HEIGHT - padding.bottom) + ")"
          }).call(axes.x);
          el_y0Axis.attr({
            transform: "translate(" + padding.left + ", 0)"
          }).call(axes.y[0]);
          el_y1Axis.attr({
            transform: "translate(" + (WIDTH - padding.right) + ", 0)"
          }).call(axes.y[1]);
          xLabel.attr({
            transform: "translate(" + (WIDTH / 2) + ", " + (scales.y[0].range()[0] + 40) + ")"
          });
          y0Label.attr({
            transform: "translate(10, " + (HEIGHT / 2) + ") rotate(-90)"
          });
          y1Label.attr({
            transform: "translate(" + (WIDTH - 10) + ", " + (HEIGHT / 2) + ") rotate(90)"
          });
          return api.update();
        };
        svg = selection.selectAll(".plot").data([1]).call(function(svg) {
          svg = svg.enter().append("svg").classed({
            plot: true
          });
          svg.append("defs").call(function(defs) {
            defs.append("clipPath").classed({
              "density-path": true
            }).attr({
              id: "densityPath"
            }).append("rect");
            return defs.selectAll("marker").data(scales.color.range()).enter().append("marker").attr({
              id: function(d) {
                return "end-arrow-" + d;
              },
              viewBox: "0 -5 10 10",
              markerWidth: 6,
              markerHeight: 6,
              orient: "auto"
            }).append("path").attr({
              d: "M 10,-5 L 0,0 L 10,5"
            }).style({
              fill: Object
            });
          });
          svg.append("g").classed({
            plots: true
          }).attr({
            "clip-path": "url(#densityPath)"
          }).call(function(plots) {
            plots.append("rect").classed({
              bg: true
            }).on({
              mousemove: api.explore
            });
            plots.append("g").classed({
              solutions: true
            });
            return plots.append("g").classed({
              scanline: true
            }).append("path");
          });
          svg.append("g").classed({
            axis: true,
            x: true
          });
          svg.append("g").classed({
            axis: true,
            y0: true
          });
          svg.append("g").classed({
            axis: true,
            y1: true
          });
          svg.append("g").classed({
            label: true,
            x: true
          }).append("text").attr({
            "text-anchor": "middle",
            dy: ".71em",
            y: -10
          }).call(function(xLabel) {
            xLabel.append("tspan").text("Altitude").classed({
              "fill-altitude": true
            });
            xLabel.append("tspan").classed({
              unit: true
            }).text(" [");
            xLabel.append("tspan").classed({
              "fill-altitude": true
            }).text("m");
            return xLabel.append("tspan").classed({
              unit: true
            }).text(" meters]");
          });
          svg.append("g").classed({
            label: true,
            y0: true
          }).append("text").attr({
            "text-anchor": "middle",
            dy: ".71em"
          }).call(function(yLabel) {
            yLabel.append("tspan").text("Temperature ").classed({
              "fill-temperature": true
            });
            yLabel.append("tspan").classed({
              unit: true
            }).text("[");
            yLabel.append("tspan").classed({
              "fill-temperature": true
            }).text("K");
            return yLabel.append("tspan").classed({
              unit: true
            }).text("]");
          });
          return svg.append("g").classed({
            label: true,
            y1: true
          }).append("text").attr({
            "text-anchor": "middle",
            dy: ".71em",
            y: -10
          }).call(function(yLabel) {
            yLabel.append("tspan").classed({
              unit: true
            }).text("Relative ");
            yLabel.append("tspan").text("Pressure ").classed({
              "fill-relative-pressure": true
            });
            yLabel.append("tspan").text("Density ").classed({
              "fill-relative-density": true
            });
            yLabel.append("tspan").classed({
              unit: true
            }).text("[");
            yLabel.append("tspan").text("bar ").classed({
              "fill-relative-pressure": true
            });
            yLabel.append("tspan").text("ρ").classed({
              "fill-relative-density": true
            });
            return yLabel.append("tspan").classed({
              unit: true
            }).text("]");
          });
        });
        plots = svg.select(".plots");
        solutions = plots.select(".solutions");
        plotsBg = plots.select(".bg");
        defs = svg.select("defs");
        clip = defs.select(".density-path rect");
        el_xAxis = svg.select(".axis.x");
        el_y0Axis = svg.select(".axis.y0");
        el_y1Axis = svg.select(".axis.y1");
        xLabel = svg.select(".label.x text");
        y0Label = svg.select(".label.y0 text");
        y1Label = svg.select(".label.y1 text");
        d3.select(window).on({
          "resize.density": api.resize
        });
        return api.resize();
      };
      return api;
    };
    return Density;
  });

}).call(this);

// Generated by CoffeeScript 1.9.0
(function() {
  define(["./explanation.js"], function(Exp) {
    var Fresnel, angles, d3, domains, i, padding, solutionParts;
    d3 = null;
    padding = {
      top: 40,
      left: 120,
      right: 120,
      bottom: 200
    };
    domains = {
      x: [0, 90],
      y: [0, 1],
      iofr: [0, 3]
    };
    angles = (function() {
      var _i, _results;
      _results = [];
      for (i = _i = 0; _i <= 90; i = _i += 0.5) {
        _results.push(i);
      }
      return _results;
    })();
    solutionParts = ["rs", "rp", "rtotal"];
    Fresnel = function(_d3) {
      var api, axes, colorizeLegend, plotSeries, scales, seriesPath;
      d3 = _d3;
      scales = {
        x: d3.scale.linear().domain(domains.x),
        y: d3.scale.linear().domain(domains.y),
        color: d3.scale.ordinal().range(["red", "blue", "green"]),
        iofr: d3.scale.linear().domain(domains.iofr)
      };
      axes = {
        x: d3.svg.axis().scale(scales.x).orient('bottom'),
        y: d3.svg.axis().scale(scales.y).orient('left'),
        iofr: d3.svg.axis().scale(scales.iofr).orient('bottom')
      };
      seriesPath = d3.svg.line().x(function(d) {
        return scales.x(d[0]);
      }).y(function(d) {
        return scales.y(d[1]);
      });
      plotSeries = function(series) {
        return series.call(function(series) {
          return series.enter().append("g").classed({
            series: true
          }).append("path").style({
            stroke: function(d, i) {
              return scales.color(i);
            }
          });
        }).selectAll("path").data(function(d) {
          return [d.points];
        }).attr({
          d: seriesPath
        });
      };
      colorizeLegend = function(d, i) {
        if (i) {
          return scales.color(i - 1);
        } else {
          return "black";
        }
      };
      api = function(selection) {
        var INCIDENT_ANGLE, INCIDENT_ANGLE_N1, INDEX_N, clip, defs, el_iofrAxis, el_xAxis, el_yAxis, iofr, iofrBg, iofrLabel, iofrValues, plots, plotsBg, solutions, svg, xLabel, yLabel;
        selection.classed({
          fresnel: true,
          explanation: true
        });
        INDEX_N = [1.0, 1.5];
        INCIDENT_ANGLE_N1 = 60;
        INCIDENT_ANGLE = 60;
        api.explore = function() {
          var mouseX, mouseY, _ref;
          _ref = d3.mouse(this), mouseX = _ref[0], mouseY = _ref[1];
          INCIDENT_ANGLE = Math.min(domains.x[1], Math.max(scales.x.invert(mouseX), domains.x[0]));
          return api.update();
        };
        api.exploreIofR = function(d, i) {
          var mouseX, mouseY, _ref;
          _ref = d3.mouse(this), mouseX = _ref[0], mouseY = _ref[1];
          INDEX_N[d.key - 1] = scales.iofr.invert(mouseX);
          return api.update();
        };
        api.update = function() {
          var key, labels, scaleSolution, scaleSolutions, serieses;
          serieses = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = solutionParts.length; _i < _len; _i++) {
              key = solutionParts[_i];
              _results.push({
                series: key,
                points: []
              });
            }
            return _results;
          })();
          angles.map(function(angle) {
            var data;
            data = Exp.laws.Fresnel(angle, INCIDENT_ANGLE_N1, INDEX_N[0], INDEX_N[1]);
            return serieses.map(function(series) {
              return series.points.push([angle, data[series.series]]);
            });
          });
          scaleSolution = Exp.laws.Fresnel(INCIDENT_ANGLE, INCIDENT_ANGLE_N1, INDEX_N[0], INDEX_N[1]);
          scaleSolutions = solutionParts.map(function(part) {
            return [INCIDENT_ANGLE, scaleSolution[part]];
          });
          plots.selectAll(".scanline path").data([[[scales.x(INCIDENT_ANGLE), scales.y.range()[0]], [scales.x(INCIDENT_ANGLE), scales.y.range()[1]]]]).attr({
            d: d3.svg.line()
          });
          labels = ["Incident Angle", "Reflection (Perpendicular)", "Reflection (Parallel)", "Reflection (Average)"];
          solutions.selectAll(".solution.legend").data([[INCIDENT_ANGLE, INCIDENT_ANGLE]].concat(scaleSolutions)).call(function(solution) {
            solution.enter().append("g").classed({
              solution: true,
              legend: true
            }).call(function(solution) {
              solution.append("text").classed({
                scale: true
              }).attr({
                dx: 10
              });
              return solution.append("text").classed({
                value: true
              }).attr("text-anchor", "end");
            });
            solution.attr({
              transform: function(d, i) {
                return "translate(\n  " + (1.5 * padding.left) + " " + (padding.top + ((i + 1) * 30)) + "\n)";
              }
            });
            solution.select(".scale").text(function(d, i) {
              return labels[i];
            }).style({
              fill: colorizeLegend
            });
            return solution.select(".value").text(function(d, i) {
              return d[1].toFixed(2);
            }).style({
              fill: colorizeLegend
            });
          });
          solutions.selectAll(".solution.interactive").data([[INCIDENT_ANGLE, scaleSolutions[0][1]], [INCIDENT_ANGLE, scaleSolutions[1][1]], [INCIDENT_ANGLE, scaleSolutions[2][1]]]).call(function(solutionLabel) {
            return solutionLabel.enter().append("g").classed({
              solution: true,
              interactive: true
            }).append("line").style({
              stroke: function(d, i) {
                return scales.color(i);
              }
            }).attr({
              x1: 0,
              y1: 0,
              x2: 20,
              y2: 0,
              "marker-start": function(d, i) {
                return "url(#end-arrow-" + (scales.color(i)) + ")";
              }
            });
          }).attr({
            transform: function(d, i) {
              return "translate(" + padding.left + ", " + (scales.y(d[1])) + ")";
            }
          });
          iofrValues.attr({
            transform: function(d) {
              return "translate(" + (scales.iofr(INDEX_N[d.key - 1])) + ", 0)";
            }
          }).select("text").text(function(d) {
            return INDEX_N[d.key - 1].toFixed(2);
          });
          plots.selectAll('.series').data(serieses).call(plotSeries);
          return api;
        };
        api.resize = function(event) {
          var HEIGHT, WIDTH;
          WIDTH = selection.node().clientWidth;
          HEIGHT = selection.node().clientHeight;
          scales.x.range([padding.left, WIDTH - padding.right]);
          scales.y.range([HEIGHT - padding.bottom, padding.top]);
          scales.iofr.range([padding.left, (WIDTH - padding.left - padding.right) / 2]);
          svg.attr({
            width: WIDTH,
            height: HEIGHT
          });
          plotsBg.attr({
            y: padding.top,
            width: WIDTH - padding.right,
            height: HEIGHT - padding.top
          });
          iofr.attr({
            transform: function(d, i) {
              return "translate(" + (i * (WIDTH / 2)) + ", " + (HEIGHT - 80) + ")";
            }
          });
          iofrBg.attr({
            y: -20,
            x: padding.left,
            width: scales.iofr.range()[1] - scales.iofr.range()[0],
            height: 50
          });
          clip.attr({
            width: WIDTH,
            height: scales.y.range()[0],
            y: padding.top,
            x: 0
          });
          el_xAxis.attr({
            transform: "translate(0, " + (HEIGHT - padding.bottom) + ")"
          }).call(axes.x);
          el_yAxis.attr({
            transform: "translate(" + padding.left + ", 0)"
          }).call(axes.y);
          el_iofrAxis.call(axes.iofr);
          xLabel.attr({
            transform: "translate(" + (WIDTH / 2) + ", " + (scales.y.range()[0] + 40) + ")"
          });
          yLabel.attr({
            transform: "translate(10, " + (HEIGHT / 2) + ") rotate(-90)"
          });
          iofrLabel.attr({
            transform: "translate(" + (WIDTH / 4) + ", 50)"
          });
          return api.update();
        };
        svg = selection.selectAll(".plot").data([1]).call(function(svg) {
          svg = svg.enter().append("svg").classed({
            plot: true
          });
          svg.append("defs").call(function(defs) {
            defs.append("clipPath").classed({
              "fresnel-path": true
            }).attr({
              id: "fresnelPath"
            }).append("rect");
            return defs.selectAll("marker.arrow").data(scales.color.range()).enter().append("marker").classed({
              arrow: true
            }).attr({
              id: function(d) {
                return "end-arrow-" + d;
              },
              viewBox: "0 -5 10 10",
              markerWidth: 6,
              markerHeight: 6,
              orient: "auto"
            }).append("path").attr({
              d: "M 10,-5 L 0,0 L 10,5"
            }).style({
              fill: Object
            });
          });
          svg.selectAll(".iofr").data(d3.entries({
            1: "Originating Index of Refraction",
            2: "Incident Index of Refraction"
          })).enter().append("g").classed({
            iofr: true
          }).on("mousemove", api.exploreIofR).call(function(iofr) {
            iofr.append("rect").classed({
              bg: true
            });
            iofr.append("text").classed({
              label: true
            }).text(function(d, i) {
              return "n" + d.key + ": " + d.value;
            }).attr({
              "text-anchor": "middle"
            });
            iofr.append("g").classed({
              interactive: true
            }).append("text").attr({
              dy: "-.35em",
              "text-anchor": "middle"
            });
            return iofr.append("g").classed({
              axis: true
            });
          });
          svg.append("g").classed({
            plots: true
          }).attr({
            "clip-path": "url(#fresnelPath)"
          }).call(function(plots) {
            plots.append("rect").classed({
              bg: true
            }).on({
              mousemove: api.explore
            });
            plots.append("g").classed({
              solutions: true
            });
            return plots.append("g").classed({
              scanline: true
            }).append("path");
          });
          svg.append("g").classed({
            axis: true,
            x: true
          });
          svg.append("g").classed({
            axis: true,
            y: true
          });
          svg.append("g").classed({
            label: true,
            x: true
          }).append("text").attr({
            "text-anchor": "middle",
            dy: ".71em",
            y: -10
          }).call(function(xLabel) {
            xLabel.append("tspan").text("Incident Angle");
            return xLabel.append("tspan").classed({
              unit: true
            }).text(" [deg]");
          });
          return svg.append("g").classed({
            label: true,
            y: true
          }).append("text").attr({
            "text-anchor": "middle",
            dy: ".71em"
          }).call(function(yLabel) {
            var spans;
            return spans = yLabel.selectAll("tspan").data([["Reflection", [], null], [" [", "unit", null], ["Rs ", null, scales.color(0)], ["Rp ", null, scales.color(1)], ["Rtotal", null, scales.color(2)], ["]", "unit", null]]).enter().append("tspan").text(function(d) {
              return d[0];
            }).attr({
              "class": function(d) {
                return d[1];
              }
            }).style({
              fill: function(d) {
                return d[2];
              }
            });
          });
        });
        plots = svg.select(".plots");
        iofr = svg.selectAll(".iofr");
        solutions = plots.select(".solutions");
        plotsBg = plots.select(".bg");
        iofrBg = iofr.selectAll(".bg");
        iofrLabel = svg.selectAll(".iofr .label");
        iofrValues = iofr.selectAll(".interactive");
        defs = svg.select("defs");
        clip = defs.select(".fresnel-path rect");
        el_xAxis = svg.select(".axis.x");
        el_yAxis = svg.select(".axis.y");
        el_iofrAxis = svg.selectAll(".iofr .axis");
        xLabel = svg.select(".label.x text");
        yLabel = svg.select(".label.y text");
        d3.select(window).on({
          "resize.fresnel": api.resize
        });
        return api.resize();
      };
      return api;
    };
    return Fresnel;
  });

}).call(this);

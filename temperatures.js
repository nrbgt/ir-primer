// Generated by CoffeeScript 1.9.0
(function() {
  define(["./explanation.js"], function(Exp) {
    var Temperatures, converters, d3, domains, padding, references, sliderPadding;
    d3 = null;
    padding = {
      top: 40,
      left: 120,
      right: 120,
      bottom: 90
    };
    sliderPadding = {
      top: 80,
      left: 10,
      right: 10,
      bottom: 110,
      temperature: 40,
      solution: 140
    };
    domains = {
      x: [0, 2000],
      y0: [-500, 2000],
      y1: [-1000, 4000]
    };
    converters = [Exp.laws.Celsius, Exp.laws.Fahrenheit, Exp.laws.Rankine];
    references = converters.map(function(convert, i) {
      return {
        scaleIdx: i,
        points: domains.x.map(function(k) {
          return [k, convert(k)];
        })
      };
    });
    Temperatures = function(_d3) {
      var api, axes, dispatch, plotSeries, scales, seriesPath, useScale;
      d3 = _d3;
      scales = {
        x: d3.scale.linear().domain(domains.x),
        y0: d3.scale.linear().domain(domains.y0),
        y1: d3.scale.linear().domain(domains.y1),
        color: d3.scale.ordinal().range(["green", "red", "blue"])
      };
      axes = {
        x: d3.svg.axis().scale(scales.x).orient('bottom'),
        y0: d3.svg.axis().scale(scales.y0).orient('left'),
        y1: d3.svg.axis().scale(scales.y1).orient('right')
      };
      seriesPath = function(y) {
        return d3.svg.line().x(function(d) {
          return scales.x(d[0]);
        }).y(function(d) {
          return y(d[1]);
        });
      };
      useScale = [scales.y0, scales.y1, scales.y1];
      plotSeries = function(series) {
        return series.call(function(series) {
          return series.enter().append("g").classed({
            series: true
          }).append("path").style({
            stroke: function(d, i) {
              return scales.color(i);
            }
          });
        }).selectAll("path").attr({
          d: function(d) {
            var fn;
            fn = seriesPath(useScale[d.scaleIdx]);
            return fn(d.points);
          }
        });
      };
      dispatch = d3.dispatch("update");
      api = function(selection) {
        var TEMPERATURE, clip, defs, el_xAxis, el_y0Axis, el_y1Axis, plots, plotsBg, solutions, svg, xLabel, y0Label, y1Label;
        selection.classed({
          explanation: true,
          temperatures: true
        });
        TEMPERATURE = 0;
        api.explore = function() {
          var mouseX, mouseY, _ref;
          _ref = d3.mouse(this), mouseX = _ref[0], mouseY = _ref[1];
          TEMPERATURE = Math.min(domains.x[1], Math.max(scales.x.invert(mouseX), domains.x[0]));
          return api.update();
        };
        api.update = function() {
          var scaleSolutions;
          scaleSolutions = converters.map(function(convert) {
            return [TEMPERATURE, convert(TEMPERATURE)];
          });
          dispatch.update({
            K: TEMPERATURE,
            C: scaleSolutions[0][1],
            F: scaleSolutions[1][1],
            R: scaleSolutions[2][1]
          });
          svg.selectAll(".solution.interactive").data([[TEMPERATURE, TEMPERATURE], [TEMPERATURE, scaleSolutions[0][1]], [TEMPERATURE, scaleSolutions[1][1]], [TEMPERATURE, scaleSolutions[2][1]]]).call(function(solutionLabel) {
            return solutionLabel.enter().append("g").classed({
              solution: true,
              interactive: true
            }).append("text").style({
              fill: function(d, i) {
                return ["black", "green", "red", "blue"][i];
              }
            }).attr({
              "text-anchor": function(d, i) {
                if (i === 0) {
                  return "middle";
                } else if (i === 1) {
                  return "start";
                } else {
                  return "end";
                }
              }
            });
          }).attr({
            transform: function(d, i) {
              if (i === 0) {
                return "translate(" + (scales.x(d[1])) + ", " + (padding.top - 10) + ")";
              } else if (i === 1) {
                return "translate(" + (padding.left + 5) + ", " + (scales.y0(d[1])) + ")";
              } else {
                return "translate(" + (scales.x.range()[1] - 5) + ", " + (scales.y1(d[1])) + ")";
              }
            }
          }).select("text").text(function(d, i) {
            return 'KCFR'[i] + " = " + (d[1].toFixed(2));
          });
          solutions.selectAll(".solution.reference").data(scaleSolutions).call(function(solution) {
            return solution.enter().append("g").classed({
              solution: true,
              reference: true
            }).call(function(solution) {
              return solution.append("circle").attr({
                r: 5
              }).style({
                stroke: function(d, i) {
                  return scales.color(i);
                }
              });
            });
          }).attr({
            transform: function(d, i) {
              return "translate(" + (scales.x(d[0])) + ", " + (useScale[i](d[1])) + " )";
            }
          });
          return api;
        };
        api.resize = function(event) {
          var HEIGHT, WIDTH;
          WIDTH = selection.node().clientWidth;
          HEIGHT = selection.node().clientHeight;
          scales.x.range([padding.left, WIDTH - padding.right]);
          scales.y1.range([HEIGHT - padding.bottom, padding.top]);
          scales.y0.range([HEIGHT - padding.bottom, padding.top]);
          svg.attr({
            width: WIDTH,
            height: HEIGHT
          });
          plotsBg.attr({
            width: WIDTH - padding.right,
            height: HEIGHT
          });
          clip.attr({
            width: WIDTH,
            height: scales.y0.range()[0],
            x: 0
          });
          el_xAxis.attr({
            transform: "translate(0, " + (HEIGHT - padding.bottom) + ")"
          }).call(axes.x);
          el_y0Axis.attr({
            transform: "translate(" + padding.left + ", 0)"
          }).call(axes.y0);
          el_y1Axis.attr({
            transform: "translate(" + (WIDTH - padding.right) + ", 0)"
          }).call(axes.y1);
          xLabel.attr({
            transform: "translate(" + [WIDTH / 2, HEIGHT - 50] + ")"
          });
          y0Label.attr({
            transform: "translate(10, " + (HEIGHT / 2) + ") rotate(-90)"
          });
          y1Label.attr({
            transform: "translate(" + (WIDTH - 10) + ", " + (HEIGHT / 2) + ") rotate(90)"
          });
          plots.selectAll('.series').data(references).call(plotSeries);
          return api.update();
        };
        svg = selection.selectAll(".plot").data([1]).call(function(svg) {
          svg = svg.enter().append("svg").classed({
            plot: true
          });
          svg.append("defs").append("clipPath").classed({
            "temperatures-path": true
          }).attr({
            id: "temperaturesPath"
          }).append("rect");
          svg.append("g").classed({
            plots: true
          }).attr({
            "clip-path": "url(#temperaturesPath)"
          }).call(function(plots) {
            plots.append("rect").classed({
              bg: true
            }).on({
              mousemove: api.explore
            });
            return plots.append("g").classed({
              solutions: true
            });
          });
          svg.append("g").classed({
            axis: true,
            x: true
          });
          svg.append("g").classed({
            axis: true,
            y0: true
          });
          svg.append("g").classed({
            axis: true,
            y1: true
          });
          svg.append("g").classed({
            label: true,
            y0: true
          }).append("text").attr({
            "text-anchor": "middle",
            dy: ".71em"
          }).call(function(yLabel) {
            yLabel.append("tspan").text("Celsius");
            return yLabel.append("tspan").classed({
              unit: true
            }).text(" [C]");
          });
          svg.append("g").classed({
            label: true,
            y1: true
          }).append("text").attr({
            "text-anchor": "middle",
            dy: ".71em"
          }).call(function(yLabel) {
            yLabel.append("tspan").text("Fahrenheit ");
            yLabel.append("tspan").text("Rankine");
            return yLabel.append("tspan").classed({
              unit: true
            }).text(" [F, R]");
          });
          return svg.append("g").classed({
            label: true,
            x: true
          }).append("text").attr({
            "text-anchor": "middle",
            dy: ".71em",
            y: -10
          }).call(function(xLabel) {
            xLabel.append("tspan").text("Kelvin");
            return xLabel.append("tspan").classed({
              unit: true
            }).text(" [K]");
          });
        });
        plots = svg.select(".plots");
        solutions = plots.select(".solutions");
        plotsBg = plots.select(".bg");
        defs = svg.select("defs");
        clip = defs.select(".temperatures-path rect");
        el_xAxis = svg.select(".axis.x");
        el_y0Axis = svg.select(".axis.y0");
        el_y1Axis = svg.select(".axis.y1");
        xLabel = svg.select(".label.x text");
        y0Label = svg.select(".label.y0 text");
        y1Label = svg.select(".label.y1 text");
        d3.select(window).on({
          "resize.temperatures": api.resize
        });
        return api.resize();
      };
      api.dispatch = dispatch;
      return api;
    };
    return Temperatures;
  });

}).call(this);
